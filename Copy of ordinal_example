{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"lIYdn1woOS1n","executionInfo":{"status":"ok","timestamp":1669310765809,"user_tz":-60,"elapsed":5594,"user":{"displayName":"Sai Deshmukh","userId":"14179537551155636236"}}},"outputs":[],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from sklearn.impute import SimpleImputer\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import OrdinalEncoder\n","from sklearn.model_selection import GridSearchCV\n","from sklearn import set_config\n","\n","# reading\n","url = \"https://drive.google.com/file/d/11uge7w4gJr_ufpN6bNsyGOcdWNUsO7Kc/view?usp=sharing\"\n","path = 'https://drive.google.com/uc?export=download&id='+url.split('/')[-2]\n","data = pd.read_csv(path)\n","\n","# X and y creation\n","X = data.copy()\n","y = X.pop(\"Expensive\")\n","\n","# data splitting\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)\n","\n","# building the pipeline\n","X_cat = X.select_dtypes(exclude=\"number\").copy()\n","X_num = X.select_dtypes(include=\"number\").copy()\n","\n","# numerical pipeline\n","numerical_pipe = make_pipeline(\n","    SimpleImputer(strategy=\"mean\"))\n","\n","# categorical pipeline\n","\n","## list columns for ordinal and ohe\n","## (Remember: .get_indexer() gets the index number of the column)\n","X_cat_ordinal = X_cat.columns.get_indexer(['ExterQual', 'ExterCond', \n","                                           'BsmtQual', 'BsmtCond',\n","                                           'BsmtExposure', 'BsmtFinType1', \n","                                           'KitchenQual', 'FireplaceQu'])\n","\n","X_cat_ohe = X_cat.columns.get_indexer(list(set(X_cat) - set(X_cat_ordinal)))\n","\n","## explicitly determine categories for ordinal encoding\n","ExterQual_cats = [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n","ExterCond_cats = [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n","BsmtQual_cats = [\"N_A\", \"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n","BsmtCond_cats = [\"N_A\", \"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n","BsmtExposure_cats = [\"N_A\", \"No\", \"Mn\", \"Av\", \"Gd\"]\n","BsmtFinType1_cats = [\"N_A\", \"Unf\", \"LwQ\", \"Rec\", \"BLQ\", \"ALQ\", \"GLQ\"]\n","KitchenQual_cats = [\"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n","FireplaceQu_cats = [\"N_A\", \"Po\", \"Fa\", \"TA\", \"Gd\", \"Ex\"]\n","\n","cats_ord = [ExterQual_cats, ExterCond_cats, BsmtQual_cats, BsmtCond_cats, \n","            BsmtExposure_cats, BsmtFinType1_cats, KitchenQual_cats, FireplaceQu_cats]\n","\n","## determine the encoders for ordinal and ohe\n","ordinal_encoder = OrdinalEncoder(categories=cats_ord)\n","ohe_encoder = OneHotEncoder(handle_unknown=\"ignore\")\n","\n","## bringing together the ohe and ordinal\n","categorical_encoder = ColumnTransformer(\n","    transformers=[\n","        (\"cat_ordinal\", ordinal_encoder, X_cat_ordinal),\n","        (\"cat_onehot\", ohe_encoder, X_cat_ohe),\n","    ]\n",")\n","\n","## adding an imputer to fill in missing values before either of the categorical encoders\n","categorical_pipe = make_pipeline(SimpleImputer(strategy=\"constant\", fill_value=\"N_A\"),\n","                                 categorical_encoder)\n","\n","# bringing together the categorical and numeric\n","full_preprocessing = ColumnTransformer(\n","    transformers=[\n","        (\"num_pipe\", numerical_pipe, X_num.columns),\n","        (\"cat_pipe\", categorical_pipe, X_cat.columns),\n","    ]\n",")\n","\n","# final pipeline to add a model after all the preprocessing\n","full_pipeline = make_pipeline(full_preprocessing, \n","                              DecisionTreeClassifier())\n","\n","# define parameter grid for grid search\n","param_grid = {\n","    \"columntransformer__num_pipe__simpleimputer__strategy\":[\"mean\", \"median\"],\n","    \"decisiontreeclassifier__max_depth\": range(2, 14, 2),\n","    \"decisiontreeclassifier__min_samples_leaf\": range(3, 12, 2)\n","}\n","\n","# initialise GridSearchCV\n","search = GridSearchCV(full_pipeline,\n","                      param_grid,\n","                      cv=5,\n","                      scoring = 'accuracy',\n","                      verbose=1)\n","\n","# Set the config so that we can view our preprocessor\n","set_config(display=\"diagram\")"]},{"cell_type":"code","source":["search.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":314},"id":"c6tdWbmpMBos","executionInfo":{"status":"ok","timestamp":1669310792460,"user_tz":-60,"elapsed":21990,"user":{"displayName":"Sai Deshmukh","userId":"14179537551155636236"}},"outputId":"caaf1c06-9be0-4f3b-f132-9c1bac32026d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Fitting 5 folds for each of 60 candidates, totalling 300 fits\n"]},{"output_type":"execute_result","data":{"text/plain":["GridSearchCV(cv=5,\n","             estimator=Pipeline(steps=[('columntransformer',\n","                                        ColumnTransformer(transformers=[('num_pipe',\n","                                                                         Pipeline(steps=[('simpleimputer',\n","                                                                                          SimpleImputer())]),\n","                                                                         Index(['LotArea', 'LotFrontage', 'TotalBsmtSF', 'BedroomAbvGr', 'Fireplaces',\n","       'PoolArea', 'GarageCars', 'WoodDeckSF', 'ScreenPorch'],\n","      dtype='object')),\n","                                                                        ('cat_pipe',\n","                                                                         Pipeline(steps=[('simpleimputer',\n","                                                                                          Si...\n","       'BsmtExposure', 'BsmtFinType1', 'KitchenQual', 'FireplaceQu'],\n","      dtype='object'))])),\n","                                       ('decisiontreeclassifier',\n","                                        DecisionTreeClassifier())]),\n","             param_grid={'columntransformer__num_pipe__simpleimputer__strategy': ['mean',\n","                                                                                  'median'],\n","                         'decisiontreeclassifier__max_depth': range(2, 14, 2),\n","                         'decisiontreeclassifier__min_samples_leaf': range(3, 12, 2)},\n","             scoring='accuracy', verbose=1)"],"text/html":["<style>#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 {color: black;background-color: white;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 pre{padding: 0;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-toggleable {background-color: white;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-estimator:hover {background-color: #d4ebff;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-item {z-index: 1;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-parallel-item:only-child::after {width: 0;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-65d8186b-1eed-4d2f-bd90-081e6af1f3f0\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5,\n","             estimator=Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;num_pipe&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n","                                                                                          SimpleImputer())]),\n","                                                                         Index([&#x27;LotArea&#x27;, &#x27;LotFrontage&#x27;, &#x27;TotalBsmtSF&#x27;, &#x27;BedroomAbvGr&#x27;, &#x27;Fireplaces&#x27;,\n","       &#x27;PoolArea&#x27;, &#x27;GarageCars&#x27;, &#x27;WoodDeckSF&#x27;, &#x27;ScreenPorch&#x27;],\n","      dtype=&#x27;object&#x27;)),\n","                                                                        (&#x27;cat_pipe&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n","                                                                                          Si...\n","       &#x27;BsmtExposure&#x27;, &#x27;BsmtFinType1&#x27;, &#x27;KitchenQual&#x27;, &#x27;FireplaceQu&#x27;],\n","      dtype=&#x27;object&#x27;))])),\n","                                       (&#x27;decisiontreeclassifier&#x27;,\n","                                        DecisionTreeClassifier())]),\n","             param_grid={&#x27;columntransformer__num_pipe__simpleimputer__strategy&#x27;: [&#x27;mean&#x27;,\n","                                                                                  &#x27;median&#x27;],\n","                         &#x27;decisiontreeclassifier__max_depth&#x27;: range(2, 14, 2),\n","                         &#x27;decisiontreeclassifier__min_samples_leaf&#x27;: range(3, 12, 2)},\n","             scoring=&#x27;accuracy&#x27;, verbose=1)</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"2445c48e-7535-4578-8f26-bf74243784e1\" type=\"checkbox\" ><label for=\"2445c48e-7535-4578-8f26-bf74243784e1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5,\n","             estimator=Pipeline(steps=[(&#x27;columntransformer&#x27;,\n","                                        ColumnTransformer(transformers=[(&#x27;num_pipe&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n","                                                                                          SimpleImputer())]),\n","                                                                         Index([&#x27;LotArea&#x27;, &#x27;LotFrontage&#x27;, &#x27;TotalBsmtSF&#x27;, &#x27;BedroomAbvGr&#x27;, &#x27;Fireplaces&#x27;,\n","       &#x27;PoolArea&#x27;, &#x27;GarageCars&#x27;, &#x27;WoodDeckSF&#x27;, &#x27;ScreenPorch&#x27;],\n","      dtype=&#x27;object&#x27;)),\n","                                                                        (&#x27;cat_pipe&#x27;,\n","                                                                         Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n","                                                                                          Si...\n","       &#x27;BsmtExposure&#x27;, &#x27;BsmtFinType1&#x27;, &#x27;KitchenQual&#x27;, &#x27;FireplaceQu&#x27;],\n","      dtype=&#x27;object&#x27;))])),\n","                                       (&#x27;decisiontreeclassifier&#x27;,\n","                                        DecisionTreeClassifier())]),\n","             param_grid={&#x27;columntransformer__num_pipe__simpleimputer__strategy&#x27;: [&#x27;mean&#x27;,\n","                                                                                  &#x27;median&#x27;],\n","                         &#x27;decisiontreeclassifier__max_depth&#x27;: range(2, 14, 2),\n","                         &#x27;decisiontreeclassifier__min_samples_leaf&#x27;: range(3, 12, 2)},\n","             scoring=&#x27;accuracy&#x27;, verbose=1)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"366b3279-d42f-44fb-8cf4-4aaa0ef3bd5c\" type=\"checkbox\" ><label for=\"366b3279-d42f-44fb-8cf4-4aaa0ef3bd5c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;num_pipe&#x27;,\n","                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n","                                                  SimpleImputer())]),\n","                                 Index([&#x27;LotArea&#x27;, &#x27;LotFrontage&#x27;, &#x27;TotalBsmtSF&#x27;, &#x27;BedroomAbvGr&#x27;, &#x27;Fireplaces&#x27;,\n","       &#x27;PoolArea&#x27;, &#x27;GarageCars&#x27;, &#x27;WoodDeckSF&#x27;, &#x27;ScreenPorch&#x27;],\n","      dtype=&#x27;object&#x27;)),\n","                                (&#x27;cat_pipe&#x27;,\n","                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n","                                                  SimpleImputer(fill_value=&#x27;N_A&#x27;,\n","                                                                strategy=&#x27;constant&#x27;)),\n","                                                 (&#x27;columntransf...\n","                                                                                                               &#x27;Fa&#x27;,\n","                                                                                                               &#x27;TA&#x27;,\n","                                                                                                               &#x27;Gd&#x27;,\n","                                                                                                               &#x27;Ex&#x27;]]),\n","                                                                                   array([ 6,  7,  8,  9, 10, 11, 12, 13])),\n","                                                                                  (&#x27;cat_onehot&#x27;,\n","                                                                                   OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n","                                                                                   array([13, 12,  7,  0,  6,  1,  3,  2,  9, 11,  4, 10,  8,  5]))]))]),\n","                                 Index([&#x27;MSZoning&#x27;, &#x27;Condition1&#x27;, &#x27;Heating&#x27;, &#x27;Street&#x27;, &#x27;CentralAir&#x27;,\n","       &#x27;Foundation&#x27;, &#x27;ExterQual&#x27;, &#x27;ExterCond&#x27;, &#x27;BsmtQual&#x27;, &#x27;BsmtCond&#x27;,\n","       &#x27;BsmtExposure&#x27;, &#x27;BsmtFinType1&#x27;, &#x27;KitchenQual&#x27;, &#x27;FireplaceQu&#x27;],\n","      dtype=&#x27;object&#x27;))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"1b9ec946-a2d5-4065-b64a-1d834ce9fe9d\" type=\"checkbox\" ><label for=\"1b9ec946-a2d5-4065-b64a-1d834ce9fe9d\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">num_pipe</label><div class=\"sk-toggleable__content\"><pre>Index([&#x27;LotArea&#x27;, &#x27;LotFrontage&#x27;, &#x27;TotalBsmtSF&#x27;, &#x27;BedroomAbvGr&#x27;, &#x27;Fireplaces&#x27;,\n","       &#x27;PoolArea&#x27;, &#x27;GarageCars&#x27;, &#x27;WoodDeckSF&#x27;, &#x27;ScreenPorch&#x27;],\n","      dtype=&#x27;object&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"76499204-11a6-4442-9fbb-842b5fe33f3c\" type=\"checkbox\" ><label for=\"76499204-11a6-4442-9fbb-842b5fe33f3c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"cfcbea29-e798-4eda-abfe-550cdeb7306b\" type=\"checkbox\" ><label for=\"cfcbea29-e798-4eda-abfe-550cdeb7306b\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat_pipe</label><div class=\"sk-toggleable__content\"><pre>Index([&#x27;MSZoning&#x27;, &#x27;Condition1&#x27;, &#x27;Heating&#x27;, &#x27;Street&#x27;, &#x27;CentralAir&#x27;,\n","       &#x27;Foundation&#x27;, &#x27;ExterQual&#x27;, &#x27;ExterCond&#x27;, &#x27;BsmtQual&#x27;, &#x27;BsmtCond&#x27;,\n","       &#x27;BsmtExposure&#x27;, &#x27;BsmtFinType1&#x27;, &#x27;KitchenQual&#x27;, &#x27;FireplaceQu&#x27;],\n","      dtype=&#x27;object&#x27;)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"d8dec14d-5d05-4950-a938-3975b42346d3\" type=\"checkbox\" ><label for=\"d8dec14d-5d05-4950-a938-3975b42346d3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(fill_value=&#x27;N_A&#x27;, strategy=&#x27;constant&#x27;)</pre></div></div></div><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"b511861d-d5b8-41a2-876d-99385ad5cbf7\" type=\"checkbox\" ><label for=\"b511861d-d5b8-41a2-876d-99385ad5cbf7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">columntransformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;cat_ordinal&#x27;,\n","                                 OrdinalEncoder(categories=[[&#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;,\n","                                                             &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                                                            [&#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;,\n","                                                             &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                                                            [&#x27;N_A&#x27;, &#x27;Po&#x27;, &#x27;Fa&#x27;,\n","                                                             &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                                                            [&#x27;N_A&#x27;, &#x27;Po&#x27;, &#x27;Fa&#x27;,\n","                                                             &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                                                            [&#x27;N_A&#x27;, &#x27;No&#x27;, &#x27;Mn&#x27;,\n","                                                             &#x27;Av&#x27;, &#x27;Gd&#x27;],\n","                                                            [&#x27;N_A&#x27;, &#x27;Unf&#x27;,\n","                                                             &#x27;LwQ&#x27;, &#x27;Rec&#x27;,\n","                                                             &#x27;BLQ&#x27;, &#x27;ALQ&#x27;,\n","                                                             &#x27;GLQ&#x27;],\n","                                                            [&#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;,\n","                                                             &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                                                            [&#x27;N_A&#x27;, &#x27;Po&#x27;, &#x27;Fa&#x27;,\n","                                                             &#x27;TA&#x27;, &#x27;Gd&#x27;,\n","                                                             &#x27;Ex&#x27;]]),\n","                                 array([ 6,  7,  8,  9, 10, 11, 12, 13])),\n","                                (&#x27;cat_onehot&#x27;,\n","                                 OneHotEncoder(handle_unknown=&#x27;ignore&#x27;),\n","                                 array([13, 12,  7,  0,  6,  1,  3,  2,  9, 11,  4, 10,  8,  5]))])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"fe41fada-6970-4a75-b509-c5786c272d1e\" type=\"checkbox\" ><label for=\"fe41fada-6970-4a75-b509-c5786c272d1e\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat_ordinal</label><div class=\"sk-toggleable__content\"><pre>[ 6  7  8  9 10 11 12 13]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"ba75efa9-b8c8-4d05-9053-cf619678c771\" type=\"checkbox\" ><label for=\"ba75efa9-b8c8-4d05-9053-cf619678c771\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OrdinalEncoder</label><div class=\"sk-toggleable__content\"><pre>OrdinalEncoder(categories=[[&#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                           [&#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                           [&#x27;N_A&#x27;, &#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                           [&#x27;N_A&#x27;, &#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                           [&#x27;N_A&#x27;, &#x27;No&#x27;, &#x27;Mn&#x27;, &#x27;Av&#x27;, &#x27;Gd&#x27;],\n","                           [&#x27;N_A&#x27;, &#x27;Unf&#x27;, &#x27;LwQ&#x27;, &#x27;Rec&#x27;, &#x27;BLQ&#x27;, &#x27;ALQ&#x27;, &#x27;GLQ&#x27;],\n","                           [&#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;],\n","                           [&#x27;N_A&#x27;, &#x27;Po&#x27;, &#x27;Fa&#x27;, &#x27;TA&#x27;, &#x27;Gd&#x27;, &#x27;Ex&#x27;]])</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"630649c9-854b-44c2-a42c-263a566b0ff5\" type=\"checkbox\" ><label for=\"630649c9-854b-44c2-a42c-263a566b0ff5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">cat_onehot</label><div class=\"sk-toggleable__content\"><pre>[13 12  7  0  6  1  3  2  9 11  4 10  8  5]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"7d9d999a-80c7-4cb6-9ea5-6626af51996e\" type=\"checkbox\" ><label for=\"7d9d999a-80c7-4cb6-9ea5-6626af51996e\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"960289ec-f58c-4ac6-85e0-4e99197eb899\" type=\"checkbox\" ><label for=\"960289ec-f58c-4ac6-85e0-4e99197eb899\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div></div></div></div></div></div></div></div>"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["search.best_score_"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kkLa1fl-StGd","executionInfo":{"status":"ok","timestamp":1669310792461,"user_tz":-60,"elapsed":9,"user":{"displayName":"Sai Deshmukh","userId":"14179537551155636236"}},"outputId":"4b617cff-49fc-4c7e-9b95-ab42598c025e"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9186786985070248"]},"metadata":{},"execution_count":3}]}],"metadata":{"colab":{"provenance":[{"file_id":"1FZYQRSsRLp18AGE-6vnMTMO94_HvTcsf","timestamp":1669309698165},{"file_id":"/v2/external/notebooks/empty.ipynb","timestamp":1669285695732}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}